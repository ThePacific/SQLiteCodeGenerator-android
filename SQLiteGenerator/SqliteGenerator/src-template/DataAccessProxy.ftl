/**
 * =============================
 * Generated by SQLiteGenerator
 * Copyright (C) 2016 UsherBaby
 * =============================
 */

package ${api.javaPackage};

import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseErrorHandler;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteTransactionListener;
import android.util.Log;

import ${api.modelJavaPackage+"."+api.superModelClassName};

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ${api.dataAccessClassName} {

    private ${api.dbOpenHelperClassName} dbOpenHelper;
    private final String tag = "${api.dataAccessClassName}";

    /**
     * When you need to create a database file in sdcard, please use DBContext.
     */
    public ${api.dataAccessClassName}(Context context, String name, int version) {
        this(context, name, null, version);
    }

    public DataAccessProxy(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
        this(context, name, factory, version, null);
    }

    public ${api.dataAccessClassName}(Context context, String name, SQLiteDatabase.CursorFactory factory, int version, DatabaseErrorHandler errorHandler) {
        dbOpenHelper = new ${api.dbOpenHelperClassName}(context, name, factory, version, errorHandler);
    }

    /**
     * @param model Just new an empty for table name.
     * @param where query condition,null for without "where"
     */
    public <T extends SuperModel> boolean isExit(T model, String where) {
        StringBuffer buffer = new StringBuffer("select * from ");
        buffer.append(model.getTableName());
        if (where != null && where.length() > 0) {
            buffer.append(" ");
            buffer.append(where);
        }
        buffer.append(" limit 0,1;");
        Cursor cursor = rawQuery(buffer.toString(), null);
        if (cursor != null && cursor.getCount() > 0) {
            return true;
        }
        return false;
    }

    /**
     * @param model Just new an empty for table name.
     * @param where query condition,null for without "where"
     */
    public <T extends SuperModel> long getCount(T model, String where) {
        StringBuffer buffer = new StringBuffer("select count(*) from ");
        buffer.append(model.getTableName());
        if (where != null && where.length() > 0) {
            buffer.append(" ");
            buffer.append(where);
        }
        buffer.append(";");
        Cursor cursor = rawQuery(buffer.toString(), null);
        if (cursor != null && cursor.moveToFirst()) {
            return cursor.getInt(0);
        }
        return 0;
    }

    /**
     * @param model Just new an empty for table name.
     * @param where query condition,null for without "where"
     */
    public <T extends SuperModel> List<T> getAll(T model, String where) {
        StringBuffer buffer = new StringBuffer("select * from ");
        buffer.append(model.getTableName());
        if (where != null && where.length() > 0) {
            buffer.append(" ");
            buffer.append(where);
        }
        buffer.append(";");
        return query(model, buffer.toString(), null);
    }

    /**
     * @param model Just new an empty for table name.
     * @param where query condition,null for without "where"
     */
    public <T extends SuperModel> boolean deleteAll(T model, String where) {
        StringBuffer buffer = new StringBuffer("delete from ");
        buffer.append(model.getTableName());
        if (where != null && where.length() > 0) {
            buffer.append(" ");
            buffer.append(where);
        }
        buffer.append(";");
        return execSQL(buffer.toString(), null);
    }

    /**
     * Insert a model.
     */
    public <T extends SuperModel> boolean insert(T model) {
        Object[] objects = model.getInsertSql();
        return execSQL(objects[0].toString(), Arrays.copyOfRange(objects, 1, objects.length - 1));
    }

    /**
     * Delete a model.
     */
    public <T extends SuperModel> boolean delete(T model) {
        Object[] objects = model.getDeleteSql();
        return execSQL(objects[0].toString(), Arrays.copyOfRange(objects, 1, objects.length - 1));
    }

    /**
     * Update a model.
     */
    public <T extends SuperModel> boolean update(T model) {
        Object[] objects = model.getUpdateSql();
        return execSQL(objects[0].toString(), Arrays.copyOfRange(objects, 1, objects.length - 1));
    }

    /**
     * Query models.
     */
    public <T extends SuperModel> List<T> query(T obj, String sql, String[] selectionArgs) {
        Cursor cursor = rawQuery(sql, selectionArgs);
        if (cursor != null && cursor.moveToFirst()) {
            List<T> list = new ArrayList<>();
            do {
                try {
                    T model = (T) obj.getClass().newInstance();
                    model.initValues(cursor);
                    list.add(model);
                } catch (Exception e) {
                    Log.e(tag, e.toString());
                }
            } while (cursor.moveToNext());
            return list;
        }
        return null;
    }

    /**
     * execute a SQL statement,usually for insert,delete,update,create,drop
     */
    public boolean execSQL(String sql, Object[] selectionArgs) {
        try {
            dbOpenHelper.getWritableDatabase().execSQL(sql, selectionArgs);
            return true;
        } catch (SQLException e) {
            Log.e(tag, e.toString());
            return false;
        }
    }

    /**
     * execute a SQL statement,usually for query only
     */
    public Cursor rawQuery(String sql, String[] selectionArgs) {
        try {
            return dbOpenHelper.getReadableDatabase().rawQuery(sql, selectionArgs);
        } catch (SQLException e) {
            Log.e(tag, e.toString());
            return null;
        }
    }

    /**
     * close the database connection,and release resource
     */
    public void release() {
        dbOpenHelper.close();
        dbOpenHelper = null;
    }

    /**
     * begin a transaction
     */
    public void beginTransaction() {
        dbOpenHelper.getWritableDatabase().beginTransaction();
    }

    /**
     * end a transaction
     */
    public void endTransaction() {
        dbOpenHelper.getWritableDatabase().endTransaction();
    }

    /**
     * set transaction successful state
     */
    public void setTransactionSuccessful() {
        dbOpenHelper.getReadableDatabase().setTransactionSuccessful();
    }

    /**
     * return if the in transaction
     */
    public boolean inTransaction() {
        return dbOpenHelper.getWritableDatabase().inTransaction();
    }

    /**
     * begin a transaction
     */
    public void beginTransactionNonExclusive() {
        dbOpenHelper.getWritableDatabase().beginTransactionNonExclusive();
    }

    /**
     * begin a transaction
     */
    public void beginTransactionNonExclusive(SQLiteTransactionListener transactionListener) {
        dbOpenHelper.getWritableDatabase().beginTransactionWithListenerNonExclusive(transactionListener);
    }

    /**
     * begin a transaction
     */
    public void beginTransaction(SQLiteTransactionListener transactionListener) {
        dbOpenHelper.getWritableDatabase().beginTransactionWithListener(transactionListener);
    }
}
